#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091,SC2119
set -euo pipefail

pw::require_bash_version() {
  if [[ "$(printf '%s\n' "${BASH_VERSION}" "4.2" | sort -V | head -n 1)" != "4.2" ]]; then
    cat << EOF >&2
pw requires bash-4.2 or later. Installed: ${BASH_VERSION}
Please install a newer version of bash.
EOF
    exit 1
  fi
}

pw::require_fzf() {
  if ! command -v fzf > /dev/null; then
    echo "pw requires fzf. Please install fzf: https://github.com/junegunn/fzf" >&2
    exit 1
  fi
}

PW_HOME="${BASH_SOURCE[0]}"
while [[ -L "${PW_HOME}" ]]; do
  PW_HOME="$(readlink "${PW_HOME}")"
done
PW_HOME="$(cd "$(dirname "${PW_HOME}")/.." && pwd)"

: "${PW_RC:="${HOME}/.pwrc"}"
[[ ! -f "${PW_RC}" ]] && cat << 'EOF' > "${PW_RC}"
PW_KEYCHAINS=(login.keychain-db)
EOF

declare -a PW_KEYCHAINS
declare -A PW_KEYCHAIN_ARGS
declare -i PW_GEN_LENGTH PW_CLIP_TIME
source "${PW_RC}"
: ${PW_GEN_LENGTH:=35}
: "${PW_GEN_CLASS:="[:graph:]"}"
: ${PW_CLIP_TIME:=45}
: "${PW_PLUGINS:="${PW_HOME}/src/plugins"}"

pw::help() {
  cat << EOF
🔐 pw $(cat "${PW_HOME}/version.txt") - Terminal Password Manager

usage: pw [-p] [-k <keychain>] [<command>] [<args>]

options:
  -h              show usage
  -p              print instead of copy to clipboard
  -k <keychain>   use given keychain

args: [<name>] [<account>] [<url>] [<notes>]

commands:
  [-p] [<args>]              copy (or print) password. If no args, fzf mode
  init <keychain>            create keychain
  add [<args>]               add entry. If no args, interactive mode
  edit [<args>]              edit entry. If no args, fzf mode
  rm [<args>]                remove entry. If no args, fzf mode
  ls                         list all entries
  gen [<length>] [<class>]   generate password with given length and character class (default: 35 [:graph:])
  open                       open keychain in native gui
  lock                       lock keychain
  unlock                     unlock keychain
  update                     update pw

customization:
  PW_KEYCHAIN                 keychain to use when not specified with -k (default: login.keychain-db)
  PW_GEN_LENGTH               default length of generated passwords (default: 35)
  PW_GEN_CLASS                default character class for generated passwords (default: [:graph:])
  PW_CLIP_TIME                time in seconds after which the password is cleared from the clipboard (default: 45)
  PW_RC                       path to the configuration file (default: ~/.pwrc)
EOF
}

# shellcheck disable=SC2153
pw::run_hook_register() {
  source "$1"
  echo "${FILE_TYPE}"
  pw::register && echo 1 || echo 0
}

# shellcheck disable=SC2153
pw::run_hook_register_with_extension() {
  source "$1"
  echo "${FILE_TYPE}"
  echo "${FILE_EXTENSION}"
  pw::register_with_extension "$2" && echo 1 || echo 0
}

pw::select_keychain() {
  if [[ -v PW_KEYCHAIN ]]; then
    pw::set_keychain "${PW_KEYCHAIN}"
  else
    local keychains
    while read -r hook; do
      # Run hook in a subshell to avoid affecting the current shell
      keychains="$(source "${hook}"; pw::discover_keychains)"
      [[ -z "${keychains}" ]] || PW_KEYCHAINS=("${keychains}" "${PW_KEYCHAINS[@]}")
    done < <(pw::plugins)

    mapfile -t PW_KEYCHAINS < <(printf "%s\n" "${PW_KEYCHAINS[@]}" | awk '!line[$0]++')

    if (( ${#PW_KEYCHAINS[@]} == 1 )); then
      pw::set_keychain "${PW_KEYCHAINS[0]}"
    else
      local keychain
      keychain="$(printf '%s\n' "${PW_KEYCHAINS[@]}" | fzf --prompt="keychain> " --layout=reverse --info=hidden)"
      pw::set_keychain "${keychain}"
    fi
  fi

  local -a plugins=()
  local -a file_types=()
  while read -r hook; do
    # Run hook in a subshell to avoid affecting the current shell
    while true; do
      read -r file_type
      read -r register
      file_types+=("${file_type}")
      (( register )) && plugins+=("$(dirname "${hook}")")
      break
    done < <(pw::run_hook_register "${hook}")
  done < <(pw::plugins)

  local -i n=${#plugins[@]}
  if (( n == 1 )); then
    source "${plugins[0]}/plugin.bash"
  elif (( n > 1 )); then
    echo "pw: Multiple plugins found for ${PW_KEYCHAIN}" >&2
    printf '%s\n' "${plugins[@]}" >&2
    exit 1
  else
    if [[ -f "${PW_KEYCHAIN}" ]]; then
      cat << EOF >&2
Could not detect plugin for ${PW_KEYCHAIN}
Supported file types are:
EOF
      printf '%s\n' "${file_types[@]}" >&2
    else
      echo "pw: ${PW_KEYCHAIN}: No such file or directory" >&2
    fi
    exit 1
  fi
}

pw::infer_plugin() {
  pw::set_keychain "$1"
  local -a plugins=()
  local -a file_types=()
  local -a file_extensions=()
  local extension
  extension="$(tr '[:upper:]' '[:lower:]' <<< "${PW_KEYCHAIN##*.}")"
  while read -r hook; do
    # Run hook in a subshell to avoid affecting the current shell
    while true; do
      read -r file_type
      read -r file_extension
      read -r register
      file_types+=("${file_type}")
      file_extensions+=("${file_extension}")
      (( register )) && plugins+=("$(dirname "${hook}")")
      break
    done < <(pw::run_hook_register_with_extension "${hook}" "${extension}")
  done < <(pw::plugins)

  local -i n=${#plugins[@]}
  if (( n == 1 )); then
    source "${plugins[0]}/plugin.bash"
  elif (( n > 1 )); then
    echo "pw: Multiple plugins found for ${PW_KEYCHAIN}" >&2
    printf '%s\n' "${plugins[@]}" >&2
    exit 1
  else
    cat << EOF >&2
Could not detect plugin for ${PW_KEYCHAIN}
Supported extensions are:
EOF
    for i in "${!file_extensions[@]}"; do
      printf "%-13s - %s\n" "${file_extensions[$i]}" "${file_types[$i]}" >&2
    done
    exit 1
  fi
}

# shellcheck disable=SC2034
pw::set_keychain() {
  PW_KEYCHAIN_ARGS=()
  if [[ "$1" == *:* ]]; then
    PW_KEYCHAIN="${1%%:*}"
    local IFS=,
    for pair in ${1#*:}; do
      PW_KEYCHAIN_ARGS["${pair%%=*}"]="${pair#*=}"
    done
  else
    PW_KEYCHAIN="$1"
  fi
}

pw::plugins() {
  find "${PW_PLUGINS}" \
    -path "${PW_PLUGINS}/sample" -prune \
    -type f -o -name "hook.bash" \
    -print \
  | LC_ALL=C sort
}

pw::prompt_keychain_password() {
  if [[ ! -v PW_KEYCHAIN_PASSWORD ]]; then
    if [[ -p /dev/stdin ]]
    then IFS= read -r PW_KEYCHAIN_PASSWORD
    else IFS= read -rsp "Please enter the keychain password:"$'\n' PW_KEYCHAIN_PASSWORD </dev/tty
    fi
  fi
}

PW_PASSWORD=""
pw::prompt_password() {
  if [[ -p /dev/stdin ]]; then
    IFS= read -r PW_PASSWORD
  else
    local retype
    read -rsp "Enter password for '${PW_NAME}' (leave empty to generate password):"$'\n' PW_PASSWORD
    if [[ -n "${PW_PASSWORD}" ]]; then
      read -rsp "Retype password for '${PW_NAME}':"$'\n' retype
      if [[ "${retype}" != "${PW_PASSWORD}" ]]; then
        echo "Error: the entered passwords do not match." >&2
        exit 1
      fi
    else
      PW_PASSWORD="$(pw::gen 1)"
    fi
  fi
}

pw::clip_and_forget() {
  local p password="$1"
  p="pw-$(id -u)"
  pkill -f "^$p" 2> /dev/null && sleep 0.5
  echo -n "${password}" | pbcopy
  ( ( exec -a "${p}" sleep "${PW_CLIP_TIME}" )
    [[ "$(pbpaste)" == "${password}" ]] && echo -n | pbcopy
  ) > /dev/null 2>&1 & disown
}

pw::gen() {
  local -i print=$1; shift
  local -i length=${1:-${PW_GEN_LENGTH}}
  local password="" class="${2:-"${PW_GEN_CLASS}"}"
  while (( "${#password}" != length )); do
    password+=$(dd if=/dev/urandom bs=1024 count=1 2> /dev/null | LC_CTYPE=C LC_ALL=C tr -dc "${class}" | head -c $(( length - ${#password} )) || true)
  done
  if (( print ))
  then echo "${password}"
  else pw::clip_and_forget "${password}"
  fi
}

pw::update() {
  local branch="${1:-main}"
  pushd "${PW_HOME}" > /dev/null || exit 1
    git switch "${branch}"
    git pull
  popd > /dev/null || exit 1
}

#
# BEGIN plugin
#

PW_NAME=""
PW_ACCOUNT=""
PW_URL=""
PW_NOTES=""
declare -ig PW_FZF=0

pw::init() {
  if [[ -f "${PW_KEYCHAIN}" ]]; then
    echo "pw: ${PW_KEYCHAIN}: File already exists" >&2
    exit 1
  fi

  pw::plugin_init
}

pw::add() {
  pw::prepare_keychain "add"

  if (( $# )); then
    pw::select_item_with_prompt add "$@"
  else
    IFS= read -rp "Title: " PW_NAME </dev/tty
    IFS= read -rp "Username: " PW_ACCOUNT </dev/tty
    IFS= read -rp "URL: " PW_URL </dev/tty
    IFS= read -rp "Notes: " PW_NOTES </dev/tty
  fi

  pw::prompt_password
  pw::plugin_add
}

pw::edit() {
  pw::prepare_keychain "edit"
  pw::select_item_with_prompt edit "$@"
  pw::prompt_password
  pw::plugin_edit
}

pw::get() {
  pw::prepare_keychain "get"
  local -i print=$1; shift
  if (( print ))
  then pw::select_item_with_prompt print "$@"
  else pw::select_item_with_prompt copy "$@"
  fi
  local password
  password="$(pw::plugin_get)"
  if (( print ))
  then echo "${password}"
  else pw::clip_and_forget "${password}"
  fi
}

pw::rm() {
  pw::prepare_keychain "rm"
  local -i remove=1
  pw::select_item_with_prompt remove "$@"
  if (( PW_FZF )); then
    read -rp "Do you really want to remove ${PW_NAME:+"'${PW_NAME}' "}${PW_ACCOUNT:+"'${PW_ACCOUNT}' "}from '${PW_KEYCHAIN}'? (y / N): "
    [[ "${REPLY}" == [yY] ]] || remove=0
  fi
  (( ! remove )) || pw::plugin_rm
}

pw::ls() {
  pw::prepare_keychain "ls"
  pw::plugin_ls "$@"
}

pw::select_item_with_prompt() {
  local fzf_prompt="$1"; shift
  if (( $# )); then
    PW_NAME="$1"
    PW_ACCOUNT="${2:-}"
    PW_URL="${3:-}"
    # shellcheck disable=SC2034
    PW_NOTES="${4:-}"
    PW_FZF=0
  else
    # pretty printed values including whitespace for column formatting:
    #   1:name, 2:account, 3:url
    # actual values are stored in:
    #   4:name, 5:account, 6:url
    # fzf will use the pretty printed values 1..3
    # variables are set with the actual values 4..6
    local item
    item="$(pw::plugin_ls "fzf")"
    item="$(echo "${item}" | fzf --prompt="${fzf_prompt}> " --layout=reverse --info=hidden \
                                 --delimiter='\t' --with-nth=1..3 --nth=1..3 \
                                 --preview="$(pw::plugin_fzf_preview)")"

    PW_NAME="$(awk -F '\t' '{print $4}' <<< "${item}")"
    PW_ACCOUNT="$(awk -F '\t' '{print $5}' <<< "${item}")"
    PW_URL="$(awk -F '\t' '{print $6}' <<< "${item}")"
    [[ -n "${PW_NAME}" || -n "${PW_ACCOUNT}" || -n "${PW_URL}" ]] || exit 1
    PW_FZF=1
  fi
}

#
# END plugin
#

main() {
  pw::require_bash_version
  pw::require_fzf

  local -i print=0
  while getopts ":hpk:" options; do
    case "${options}" in
      h) pw::help; return ;;
      p) print=1 ;;
      k) PW_KEYCHAIN="${OPTARG}" ;;
      *) echo "Invalid option: -${OPTARG}" >&2; exit 1 ;;
    esac
  done
  shift $(( OPTIND - 1 ))

  if (( $# )); then
    case "$1" in
      init) shift; pw::infer_plugin "$@"; pw::init ;;
      add) shift; pw::select_keychain; pw::add "$@" ;;
      edit) shift; pw::select_keychain; pw::edit "$@" ;;
      rm) shift; pw::select_keychain; pw::rm "$@" ;;
      ls) shift; pw::select_keychain; pw::ls "$@" ;;
      gen) shift; pw::gen ${print} "$@" ;;
      open) shift; pw::select_keychain; pw::plugin_open ;;
      lock) shift; pw::select_keychain; pw::plugin_lock ;;
      unlock) shift; pw::select_keychain; pw::plugin_unlock ;;
      update) shift; pw::update "$@" ;;
      *) pw::select_keychain; pw::get ${print} "$@" ;;
    esac
  else
    pw::select_keychain
    pw::get ${print}
  fi
}

[[ "${BASH_SOURCE[0]}" != "$0" ]] || main "$@"
