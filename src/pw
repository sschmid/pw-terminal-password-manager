#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091,SC2119
SHELL="$(which bash)"
set -euo pipefail

pw::exit() {
  printf "%s\n" "$@" >&2
  exit 1
}

pw::require_bash_version() {
  if [[ "$(printf '%s\n' "${BASH_VERSION}" "4.2" | sort -V | head -n 1)" != "4.2" ]]; then
    pw::exit "pw requires bash-4.2 or later. Installed: ${BASH_VERSION}" \
             "Please install a newer version of bash."
  fi
}

pw::require_fzf() {
  command -v fzf >/dev/null || pw::exit "pw requires fzf. Please install fzf: https://github.com/junegunn/fzf"
}

PW_HOME="${BASH_SOURCE[0]}"
while [[ -L "${PW_HOME}" ]]; do
  PW_HOME="$(readlink "${PW_HOME}")"
done
PW_HOME="$(cd "$(dirname "${PW_HOME}")/.." && pwd)"

: "${PW_RC:="${HOME}/.pwrc"}"
[[ ! -f "${PW_RC}" ]] && touch "${PW_RC}"

declare -a PW_KEYCHAINS
declare -A PW_KEYCHAIN_ARGS
declare -i PW_PRINT=0 PW_GEN_LENGTH PW_CLIP_TIME

# KCOV_EXCL_START
mapfile -t PW_KEYCHAINS < <(awk -v home="${HOME}" '{
  gsub(/^~/, home)
  gsub(/^\$HOME/, home)
  gsub(/^\${HOME}/, home)
  if (NF) print $1 }' "${PW_RC}")
# KCOV_EXCL_STOP

: ${PW_GEN_LENGTH:=35}
: "${PW_GEN_CLASS:="[:graph:]"}"
: ${PW_CLIP_TIME:=45}
: "${PW_PLUGINS:="${PW_HOME}/src/plugins"}"

pw::help() {
  cat << EOF
🔐 pw $(cat "${PW_HOME}/version.txt") - Terminal Password Manager

usage: pw [-p] [-k <keychain>] [<command>] [<args>]

options:
  -h              show usage
  -p              print instead of copy to clipboard
  -k <keychain>   use given keychain

args: [<name>] [<account>] [<url>] [<notes>]

commands:
  [-p] [<args>]                   copy (or print) password. If no args, fzf mode
  init <keychain>                 create keychain
  add [<args>]                    add entry. If no args, interactive mode
  edit [<args>]                   edit entry. If no args, fzf mode
  show [-p] [<args>]              copy (or print) details. If no args, fzf mode
  rm [<args>]                     remove entry. If no args, fzf mode
  ls                              list all entries
  gen [-p] [<length>] [<class>]   generate password with given length and character class (default: 35 [:graph:])
  open                            open keychain in native gui
  lock                            lock keychain
  unlock                          unlock keychain
  update                          update pw

customization:
  PW_KEYCHAIN                 keychain to use when not specified with -k
  PW_GEN_LENGTH               default length of generated passwords (default: 35)
  PW_GEN_CLASS                default character class for generated passwords (default: [:graph:])
  PW_CLIP_TIME                time in seconds after which the password is cleared from the clipboard (default: 45)
  PW_RC                       path to the configuration file (default: ~/.pwrc)
EOF
}

pw::run_hook_discover_keychains() {
  source "$1"
  pw::discover_keychains
}

# shellcheck disable=SC2153
pw::run_hook_register() {
  source "$1"
  echo "${FILE_TYPE}"
  pw::register && echo 1 || echo 0
}

# shellcheck disable=SC2153
pw::run_hook_register_with_extension() {
  source "$1"
  echo "${FILE_TYPE}"
  echo "${FILE_EXTENSION}"
  pw::register_with_extension "$2" && echo 1 || echo 0
}

pw::select_keychain() {
  if [[ -v PW_KEYCHAIN ]]; then
    pw::set_keychain "${PW_KEYCHAIN}"
  else
    local keychains
    while read -r hook; do
      # Run hook in a subshell to avoid affecting the current shell
      keychains="$(pw::run_hook_discover_keychains "${hook}")"
      [[ -z "${keychains}" ]] || PW_KEYCHAINS+=("${keychains}")
    done < <(pw::plugins)

    mapfile -t PW_KEYCHAINS < <(printf "%s\n" "${PW_KEYCHAINS[@]}" | awk '!line[$0]++')

    if (( ${#PW_KEYCHAINS[@]} == 1 )); then
      pw::set_keychain "${PW_KEYCHAINS[0]}"
    else
      local keychain
      keychain="$(printf '%s\n' "${PW_KEYCHAINS[@]}" | sort -f | fzf --prompt "keychain> " --layout reverse --info hidden)"
      pw::set_keychain "${keychain}"
    fi
  fi

  local -a plugins=() types=()
  while read -r hook; do
    # Run hook in a subshell to avoid affecting the current shell
    while true; do
      read -r file_type
      read -r register
      types+=("${file_type}")
      (( register )) && plugins+=("$(dirname "${hook}")")
      break
    done < <(pw::run_hook_register "${hook}")
  done < <(pw::plugins)

  local -i n=${#plugins[@]}
  if (( n == 1 )); then
    PW_PLUGIN="${plugins[0]}"
  elif (( n > 1 )); then
    pw::exit "pw: Multiple plugins found for ${PW_KEYCHAIN}" "$(printf '%s\n' "${plugins[@]}")"
  else
    if [[ -f "${PW_KEYCHAIN}" ]]; then
      pw::exit "Could not detect plugin for ${PW_KEYCHAIN}" \
               "Supported file types are:" "$(printf '%s\n' "${types[@]}")"
    else
      pw::exit "pw: ${PW_KEYCHAIN}: No such file or directory"
    fi
  fi
}

pw::infer_plugin() {
  pw::set_keychain "$1"
  local -a plugins=() types=() exts=()
  local extension
  extension="$(tr '[:upper:]' '[:lower:]' <<< "${PW_KEYCHAIN##*.}")"
  while read -r hook; do
    # Run hook in a subshell to avoid affecting the current shell
    while true; do
      read -r file_type
      read -r file_extension
      read -r register
      types+=("${file_type}")
      exts+=("${file_extension}")
      (( register )) && plugins+=("$(dirname "${hook}")")
      break
    done < <(pw::run_hook_register_with_extension "${hook}" "${extension}")
  done < <(pw::plugins)

  local -i n=${#plugins[@]}
  if (( n == 1 )); then
    PW_PLUGIN="${plugins[0]}"
  elif (( n > 1 )); then
    pw::exit "pw: Multiple plugins found for ${PW_KEYCHAIN}" "$(printf '%s\n' "${plugins[@]}")"
  else
    pw::exit "Could not detect plugin for ${PW_KEYCHAIN}" \
             "Supported extensions are:" \
             "$(for i in "${!exts[@]}"; do printf "%-13s - %s\n" "${exts[$i]}" "${types[$i]}"; done)"
  fi
}

# shellcheck disable=SC2034
pw::set_keychain() {
  PW_KEYCHAIN_ARGS=()
  if [[ "$1" == *:* ]]; then
    PW_KEYCHAIN="${1%%:*}"
    local IFS=,
    for pair in ${1#*:}; do
      PW_KEYCHAIN_ARGS["${pair%%=*}"]="${pair#*=}"
    done
  else
    PW_KEYCHAIN="$1"
  fi

  [[ -n "${PW_KEYCHAIN}" ]] || pw::exit "pw: no keychain was set!" \
    "Set a keychain with the -k option or provide a list of default keychains in your .pwrc file (${PW_RC})."
}

pw::plugins() {
  find "${PW_PLUGINS}" \
    -path "${PW_PLUGINS}/sample" -prune \
    -type f -o -name "hook.bash" \
    -print \
  | LC_ALL="C.UTF-8" sort
}

PW_PASSWORD=""
pw::prompt_password() {
  if [[ -p /dev/stdin ]]; then
    IFS= read -r PW_PASSWORD
  else
    local retype
    IFS= read -rsp "Enter password for '${PW_NAME}' (leave empty to generate password):"$'\n' PW_PASSWORD
    if [[ -n "${PW_PASSWORD}" ]]; then
      IFS= read -rsp "Retype password for '${PW_NAME}':"$'\n' retype
      if [[ "${retype}" != "${PW_PASSWORD}" ]]; then
        pw::exit "Error: the entered passwords do not match."
      fi
    else
      PW_PRINT=1 PW_PASSWORD="$(pw::gen)"
    fi
  fi
}

pw::output() {
  if (( PW_PRINT )); then
    echo "$1"
  else
    local p
    p="pw-$(id -u)"
    pkill -f "^$p" 2>/dev/null && sleep 0.5
    echo -n "$1" | pbcopy
    ( ( exec -a "${p}" sleep "${PW_CLIP_TIME}" )
      [[ "$(pbpaste)" == "$1" ]] && echo -n | pbcopy
    ) &>/dev/null & disown
  fi
}

pw::gen() {
  local -i length=${1:-${PW_GEN_LENGTH}}
  local password="" class="${2:-"${PW_GEN_CLASS}"}"
  while (( "${#password}" != length )); do
    password+=$(dd if=/dev/urandom bs=1024 count=1 2>/dev/null | LC_CTYPE=C LC_ALL=C tr -dc "${class}" | head -c $(( length - ${#password} )) || true)
  done
  pw::output "${password}"
}

pw::update() {
  local branch="${1:-main}"
  pushd "${PW_HOME}" >/dev/null || exit 1
    git switch "${branch}"
    git pull
  popd >/dev/null || exit 1
}

#
# BEGIN plugin
#

PW_NAME=""
PW_ACCOUNT=""
PW_URL=""
PW_NOTES=""
declare -ig PW_FZF=0

pw::init() {
  [[ -e "${PW_KEYCHAIN}" ]] && pw::exit "pw: ${PW_KEYCHAIN} already exists."
  "${PW_PLUGIN}/init" "${PW_KEYCHAIN}"
}

pw::add() {
  pw::prepare_keychain "add"

  if (( $# )); then
    pw::select_item_with_prompt "add" "$@"
  else
    IFS= read -rp "Title: " PW_NAME </dev/tty
    IFS= read -rp "Username: " PW_ACCOUNT </dev/tty
    IFS= read -rp "URL: " PW_URL </dev/tty
    echo "Notes: Enter multi-line input (end with Ctrl+D):"
    PW_NOTES=$(cat)
  fi

  pw::prompt_password
  "${PW_PLUGIN}/add" "${PW_KEYCHAIN}" "${PW_PASSWORD}" "${PW_NAME}" "${PW_ACCOUNT}" "${PW_URL}" "${PW_NOTES}"
}

pw::edit() {
  pw::prepare_keychain "edit"
  pw::select_item_with_prompt "edit" "$@"
  pw::prompt_password
  "${PW_PLUGIN}/edit" "${PW_KEYCHAIN}" "${PW_PASSWORD}" "${PW_NAME}" "${PW_ACCOUNT}" "${PW_URL}"
}

pw::get() {
  pw::prepare_keychain "get"
  if (( PW_PRINT ))
  then pw::select_item_with_prompt "print" "$@"
  else pw::select_item_with_prompt "copy" "$@"
  fi
  local password
  password="$("${PW_PLUGIN}/get" "${PW_KEYCHAIN}" "${PW_NAME}" "${PW_ACCOUNT}" "${PW_URL}")"
  pw::output "${password}"
}

pw::show() {
  pw::prepare_keychain "show"
  if (( PW_PRINT ))
  then pw::select_item_with_prompt "print details" "$@"
  else pw::select_item_with_prompt "copy details" "$@"
  fi
  local details
  details="$("${PW_PLUGIN}/show" "${PW_KEYCHAIN}" "${PW_NAME}" "${PW_ACCOUNT}" "${PW_URL}")"
  pw::output "${details}"
}

pw::rm() {
  pw::prepare_keychain "rm"
  local -i remove=1
  pw::select_item_with_prompt "remove" "$@"
  if (( PW_FZF )); then
    read -rp "Do you really want to remove ${PW_NAME:+"'${PW_NAME}' "}${PW_ACCOUNT:+"'${PW_ACCOUNT}' "}from '${PW_KEYCHAIN}'? (y / N): "
    [[ "${REPLY}" == [yY] ]] || remove=0
  fi
  (( ! remove )) || "${PW_PLUGIN}/rm" "${PW_KEYCHAIN}" "${PW_NAME}" "${PW_ACCOUNT}" "${PW_URL}"
}

pw::ls() {
  pw::prepare_keychain "ls"
  "${PW_PLUGIN}/ls" "${PW_KEYCHAIN}" "$@"
}

pw::select_item_with_prompt() {
  local fzf_prompt="$1"; shift
  if (( $# )); then
    PW_NAME="$1"
    PW_ACCOUNT="${2:-}"
    PW_URL="${3:-}"
    # shellcheck disable=SC2034
    PW_NOTES="${4:-}"
    PW_FZF=0
  else
    # pretty printed values including whitespace for column formatting:
    #   1:name, 2:account, 3:url
    # actual values are stored in:
    #   4:name, 5:account, 6:url
    # fzf will use the pretty printed values 1..3
    # variables are set with the actual values 4..6
    local item preview yank yank_action
    item="$("${PW_PLUGIN}/ls" "${PW_KEYCHAIN}" "fzf")"
    preview="$("${PW_PLUGIN}/fzf_preview" "${PW_KEYCHAIN}")"
    yank="PW_PRINT=${PW_PRINT}; PW_CLIP_TIME=${PW_CLIP_TIME}; $(declare -f pw::output); pw::output \"\$(${preview})\""
    (( PW_PRINT )) && yank_action="print" || yank_action="copy"
    item="$(fzf --prompt "${fzf_prompt}> " --layout reverse --info hidden \
                --delimiter '\t' --with-nth 1..3 --nth 1..3 \
                --preview "${preview}" \
                --preview-window hidden \
                --header "?: toggle preview, CTRL-Y: ${yank_action} details" \
                --bind "ctrl-y:execute(${yank})+abort" \
                --bind '?:toggle-preview' <<< "${item}")"

    IFS=$'\t' read -r _ _ _ PW_NAME PW_ACCOUNT PW_URL <<< "${item}"
    [[ -n "${PW_NAME}" || -n "${PW_ACCOUNT}" || -n "${PW_URL}" ]] || exit 1
    PW_FZF=1
  fi
}

#
# END plugin
#

main() {
  pw::require_bash_version
  pw::require_fzf

  while getopts ":hpk:" options; do
    case "${options}" in
      h) pw::help; return ;;
      p) PW_PRINT=1 ;;
      k) PW_KEYCHAIN="${OPTARG}" ;;
      *) pw::exit "Invalid option: -${OPTARG}" ;;
    esac
  done
  shift $(( OPTIND - 1 ))

  if (( $# )); then
    case "$1" in
      init) shift; pw::infer_plugin "$@"; pw::init ;;
      add) shift; pw::select_keychain; pw::add "$@" ;;
      edit) shift; pw::select_keychain; pw::edit "$@" ;;
      show) shift; pw::select_keychain; pw::show "$@" ;;
      rm) shift; pw::select_keychain; pw::rm "$@" ;;
      ls) shift; pw::select_keychain; pw::ls "$@" ;;
      gen) shift; pw::gen "$@" ;;
      open) shift; pw::select_keychain; "${PW_PLUGIN}/open" "${PW_KEYCHAIN}" ;;
      lock) shift; pw::select_keychain; "${PW_PLUGIN}/lock" "${PW_KEYCHAIN}" ;;
      unlock) shift; pw::select_keychain; "${PW_PLUGIN}/unlock" "${PW_KEYCHAIN}" ;;
      update) shift; pw::update "$@" ;;
      *) pw::select_keychain; pw::get "$@" ;;
    esac
  else
    pw::select_keychain
    pw::get
  fi
}

[[ "${BASH_SOURCE[0]}" != "$0" ]] || main "$@"
